CREATE DATABASE youmanitarian;
USE youmanitarian;

-- Users Table
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    approved_by INT NULL,
    google_id VARCHAR(255) UNIQUE NULL,
    profile_pic VARCHAR(255) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
Dateofbirth
Address
gender
    FOREIGN KEY (approved_by) REFERENCES users(id) ON DELETE SET NULL
    ALTER TABLE users ADD last_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;
ALTER TABLE users ADD COLUMN is_typing TINYINT(1) DEFAULT 0;
);

Schema::create('roles', function (Blueprint $table) {
            $table->id();
            $table->string('role_name')->unique();
            $table->text('description')->nullable();
            $table->timestamps();
        });


         Schema::create('user_roles', function (Blueprint $table) {
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->foreignId('role_id')->constrained()->cascadeOnDelete();
            $table->foreignId('assigned_by')->nullable()->constrained('users')->nullOnDelete();
            $table->timestamp('assigned_at')->default(now());
            $table->primary(['user_id', 'role_id']);
            $table->timestamps();
        });

        Schema::create('content', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->text('body');
            $table->string('image_content')->nullable();
            $table->foreignId('created_by')->constrained('users')->onDelete('cascade');
            $table->enum('status', ['draft', 'published', 'archived'])->default('draft');
            $table->enum('type', ['news', 'program'])->default('news');
$table->enum('approval_status', ['pending', 'approved', 'rejected', needs_revision])->default('pending');
$table->unsignedBigInteger('created_by'); // the user who made the content
$table->unsignedBigInteger('approved_by')->nullable();
$table->timestamp('approved_at')->nullable();


$table->string('slug')->unique();
            $table->integer('views')->default(0);

$table->boolean('enable_likes')->default(true);
$table->boolean('enable_comments')->default(true);
$table->boolean('enable_bookmark')->default(true);

$table->foreignId('request_id')->nullable()->after('created_by')->constrained('content_requests')->onDelete('set null');

       remove   
            --$table->foreignId('locked_by')->nullable()->constrained('users')->nullOnDelete();
            --$table->timestamp('locked_at')->nullable();
            $table->timestamps();
        });


Schema::create('bookmarks', function (Blueprint $table) {
    $table->id();
    $table->foreignId('user_id')->constrained()->onDelete('cascade');
    $table->foreignId('content_id')->constrained()->onDelete('cascade');
    $table->timestamps();
});
         Schema::create('content_images', function (Blueprint $table) {
            $table->id();
            $table->foreignId('content_id')->constrained('content')->onDelete('cascade');
            $table->string('image_path');
            $table->timestamp('uploaded_at')->useCurrent();
        });

        Schema::create('content_requests', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->text('description');
            $table->foreignId('requested_by')->constrained('users')->onDelete('cascade');
$table->enum('urgency_level', ['low', 'medium', 'high'])->default('medium');
$table->date('expected_publication_date')->nullable()->after('description');
            $table->enum('status', ['pending', 'in_progress', 'completed'])->default('pending');
            $table->text('notes')->nullable();
            $table->timestamps();
        });

        Schema::create('content_request_images', function (Blueprint $table) {
            $table->id();
            $table->foreignId('request_id')->constrained('content_requests')->onDelete('cascade');
            $table->string('image_url');
            $table->timestamp('created_at')->useCurrent();
            $table->timestamp('updated_at')->nullable()->after('created_at');
        });

         Schema::create('heart_reacts', function (Blueprint $table) {
            $table->id();
            $table->foreignId('content_id')->constrained('content')->onDelete('cascade');
            $table->foreignId('user_id')->constrained('users')->onDelete('cascade');
            $table->timestamps();

            $table->unique(['content_id', 'user_id']);
        });

Schema::create('content_review_comments', function (Blueprint $table) {
    $table->id();
    $table->unsignedBigInteger('content_id'); // references the content being reviewed
    $table->unsignedBigInteger('user_id');    // who made the comment (program coordinator or content manager)
    $table->text('comment');
    $table->enum('role', ['creator', 'reviewer'])->nullable(); // optional, helps distinguish roles
    $table->timestamps();

    $table->foreign('content_id')->references('id')->on('contents')->onDelete('cascade');
    $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
});


        Schema::create('content_comments', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('content_id');
            $table->unsignedBigInteger('user_id');
            $table->text('comment');
            $table->timestamps();

            // Foreign Keys
            $table->foreign('content_id')->references('id')->on('content')->onDelete('cascade');
            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
        });

     
//$table->enum('attendance_mode', ['volunteer', 'coordinator', 'both'])->default('coordinator');
//$table->enum('approval_mode', ['auto', 'manual'])->default('manual');
        //single days - because volunteers may/ may not only apply to specific dates.
Schema::create('programs', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->text('description')->nullable();
            $table->date('date')->nullable(); 
            $table->time('start_time')->nullable(); 
            $table->time('end_time')->nullable();
            $table->string('location')->nullable(); 
            $table->enum('progress', ['incoming', 'ongoing', 'done'])->default('incoming');
            $table->integer('volunteer_count')->default(0);

            $table->foreignId('created_by')->constrained('users')->onDelete('cascade'); 
            $table->timestamps();
        });

        Schema::create('program_feedback', function (Blueprint $table) {
            $table->id();
            $table->foreignId('program_id')->constrained()->onDelete('cascade');
            $table->foreignId('user_id')->nullable()->constrained()->onDelete('set null');
            $table->text('feedback');
            $table->tinyInteger('rating')->nullable(); // 1 to 5 stars, optional
            $table->boolean('is_active')->default(false); 
            $table->timestamps();
        });

        Schema::create('volunteers', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id')->unique();
            $table->integer('total_hours')->default(0);
            $table->enum('application_status', ['pending', 'approved', 'denied'])->default('pending');
            $table->timestamp('joined_at')->nullable();
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
        });

        Schema::create('program_volunteers', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('program_id');
            $table->unsignedBigInteger('volunteer_id');
            $table->enum('status', ['pending', 'approved', 'denied'])->default('pending');
            $table->timestamps();

            $table->foreign('program_id')->references('id')->on('programs')->onDelete('cascade');
            $table->foreign('volunteer_id')->references('id')->on('volunteers')->onDelete('cascade');
        });

        Schema::create('program_tasks', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('program_id');
            $table->text('task_description');
            $table->enum('status', ['pending', 'in_progress', 'completed'])->default('pending');
            $table->timestamps();

            $table->foreign('program_id')->references('id')->on('programs')->onDelete('cascade');
        });

        Schema::create('task_assignments', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('task_id');
            $table->unsignedBigInteger('volunteer_id');
            $table->unsignedBigInteger('assigned_by');
            $table->enum('status', ['pending', 'in_progress', 'completed'])->default('pending');
            $table->timestamps();

            $table->foreign('task_id')->references('id')->on('program_tasks')->onDelete('cascade');
            $table->foreign('volunteer_id')->references('id')->on('volunteers')->onDelete('cascade');
            $table->foreign('assigned_by')->references('id')->on('users')->onDelete('cascade');
        });

        Schema::create('volunteer_attendance', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('volunteer_id');
            $table->unsignedBigInteger('program_id');
            $table->dateTime('clock_in')->nullable();
            $table->dateTime('clock_out')->nullable();
            $table->integer('hours_logged')->default(0);

            $table->enum('approval_status', ['pending', 'approved', 'rejected'])->default('pending');
            $table->unsignedBigInteger('approved_by')->nullable();
            $table->foreign('approved_by')->references('id')->on('users')->nullOnDelete();
            $table->text('notes')->nullable(); -- for volunteer who forgot clockout or attendance at all

            $table->timestamps();

            $table->foreign('volunteer_id')->references('id')->on('volunteers')->onDelete('cascade');
            $table->foreign('program_id')->references('id')->on('programs')->onDelete('cascade');
        });

        Schema::create('volunteer_application', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('volunteer_id'); 
        
            $table->string('why_volunteer', 500)->nullable(); 
            $table->string('interested_programs', 255)->nullable();
            $table->string('skills_experience', 255)->nullable();
            $table->string('availability', 255)->nullable();
            $table->string('commitment_hours', 255)->nullable();
            $table->string('physical_limitations', 255)->nullable();
            $table->string('emergency_contact', 255)->nullable();
            $table->enum('contact_consent', ['yes', 'no']);
            $table->enum('volunteered_before', ['yes', 'no']);
            $table->enum('outdoor_ok', ['yes', 'no', 'depends']);
            $table->string('short_bio', 500)->nullable();
        
            $table->boolean('is_active')->default(true); 
            $table->timestamp('submitted_at')->nullable(); 
        
            $table->foreign('volunteer_id')->references('id')->on('volunteers')->onDelete('cascade');
            $table->timestamps();
        });    

        Schema::create('program_chats', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('program_id');
            $table->unsignedBigInteger('sender_id'); // user sending the message
            $table->text('message');
            $table->timestamp('sent_at')->useCurrent();
            $table->timestamps();

            $table->foreign('program_id')->references('id')->on('programs')->onDelete('cascade');
            $table->foreign('sender_id')->references('id')->on('users')->onDelete('cascade');
        });



Schema::create('membership_payments', function (Blueprint $table) {
    $table->id();
    $table->unsignedBigInteger('member_id');  // Changed from user_id to member_id
    $table->decimal('amount', 10, 2);
    $table->timestamp('payment_date')->useCurrent();
    $table->enum('payment_status', ['Paid', 'Pending', 'Overdue'])->default('Pending');
    $table->string('receipt_url')->nullable();
    $table->enum('payment_period', ['Q1', 'Q2', 'Q3', 'Q4'])->nullable();
    $table->year('payment_year')->nullable();  // Added to track which year the payment is for
    $table->timestamps();

    $table->foreign('member_id')->references('id')->on('members')->onDelete('restrict');
    
    // Add a unique constraint to prevent duplicate payments for the same period
    $table->unique(['member_id', 'payment_period', 'payment_year']);
});

Schema::create('members', function (Blueprint $table) {
    $table->id();
    $table->unsignedBigInteger('user_id')->unique(); 
    $table->unsignedBigInteger('volunteer_id')->unique();
    $table->enum('membership_type', ['full_pledge', 'honorary'])->default('full_pledge'); 
    $table->timestamp('start_date')->useCurrent();
    $table->timestamp('end_date')->nullable(); 
    $table->enum('membership_status', ['active', 'inactive'])->default('inactive');
    $table->boolean('board_invited')->default(false); 
    $table->timestamp('became_member_at')->nullable();
    $table->timestamps();

    $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
    $table->foreign('volunteer_id')->references('id')->on('volunteers')->onDelete('cascade');
});

Schema::create('donations', function (Blueprint $table) {
    $table->id();  
    $table->string('donor_name')->nullable();  
    $table->string('donor_email')->nullable();  
    $table->decimal('amount', 10, 2);  
    $table->timestamp('donation_date')->useCurrent();
    $table->enum('payment_method', ['PayPal', 'Bank Transfer', 'Cash', 'GCash', 'Other'])->default('Other');
    $table->string('receipt_url')->nullable();  
    $table->enum('status', ['Confirmed', 'Pending'])->default('Pending');
    $table->timestamps();  
});


Schema::create('partners', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->string('logo')->nullable(); 
    $table->string('url')->nullable();
    $table->text('description')->nullable();
    $table->boolean('is_active')->default(true); // control visibility
    $table->timestamps();
});

Schema::create('testimonials', function (Blueprint $table) {
    $table->id();
    $table->string('name'); 
    $table->string('role')->nullable(); //optional.
    $table->text('message'); 
    $table->string('image')->nullable(); // optional avatar
    $table->boolean('is_active')->default(false); // pending/moderated - if true, it will be displayed
    $table->timestamps();
});


Schema::create('consultation_hours', function (Blueprint $table) {
    $table->id();
    $table->unsignedBigInteger('user_id'); // professional
    $table->string('specialization');
    $table->enum('day', ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']);
    $table->time('start_time');
    $table->time('end_time');
    $table->timestamps();

    $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
});



Schema::create('consultation_chats', function (Blueprint $table) {
    $table->id();
    $table->unsignedBigInteger('sender_id');
    $table->unsignedBigInteger('receiver_id'); // the professional
    $table->text('message');
    $table->unsignedBigInteger('thread_id')->nullable();
    $table->timestamp('sent_at')->useCurrent();
    $table->timestamps();

    $table->foreign('sender_id')->references('id')->on('users')->onDelete('cascade');
    $table->foreign('receiver_id')->references('id')->on('users')->onDelete('cascade');
});

Schema::create('consultation_threads', function (Blueprint $table) {
    $table->id();
    $table->unsignedBigInteger('volunteer_id');
    $table->unsignedBigInteger('professional_id');
    $table->enum('status', ['active', 'closed'])->default('active');
    $table->timestamps();

    $table->foreign('volunteer_id')->references('id')->on('users')->onDelete('cascade');
    $table->foreign('professional_id')->references('id')->on('users')->onDelete('cascade');
});


